<GNN으로 학습할 때의 어려움>

(1) 그래프 데이터 전처리
테이블 형태의 데이터를 선수 간 관계를 나타내는 그래프로 변환해야 하는데, 적절한 그래프 구조 정의가 어렵습니다.
노드: 선수
엣지: 경기 기록(누가 누구와 싸웠는가) 또는 상호작용(승패 관계, 기술 차이 등)
노드 및 엣지의 특징(feature) 설정이 불명확할 수 있습니다.
예: 노드(선수) 속성으로 경기 기술 통계, 체급 정보 등을 추가해야 할지 결정 필요.
해결책:
UFC 데이터의 구조를 바탕으로, 노드/엣지 특성과 그래프 정의를 명확히 설정.
예를 들어, 과거 경기의 상대 전적 데이터를 엣지 특성으로 활용할 수 있습니다.

(2) 데이터 크기와 희소성
UFC 선수 및 경기 데이터는 일반적으로 크기가 작고, 노드 간 연결이 희소(sparse)합니다.
희소한 데이터에서 그래프의 패턴을 학습하기 어렵습니다.
예: 각 선수가 특정 상대와만 경기했을 경우, 네트워크가 제한적일 수 있음.
해결책:
데이터 증강(data augmentation)을 통해 그래프를 확장.
예: 특정 노드/엣지 정보를 유사한 선수 그룹과 공유하여 희소성을 완화.

(3) 동적 그래프 처리
UFC 데이터는 시간에 따라 선수의 실력이나 경기 스타일이 변화합니다.
일반 GNN은 정적 그래프를 처리하기 때문에 시간 축에 따른 관계 변화를 반영하기 어렵습니다.
해결책:
Dynamic GNN 또는 Temporal GNN 모델 사용.
예: 시간 축에 따라 변화하는 관계를 모델링하기 위해 EvolveGCN 또는 **TGAT(Temporal Graph Attention Network)**를 활용.

(4) 모델 학습 안정성
그래프 구조가 복잡할수록 Gradient Vanishing/Exploding 문제가 발생할 수 있습니다.
특히, 매우 연결된 그래프(모든 선수 간 관계 포함)에서는 학습이 어려울 수 있습니다.
해결책:
모델 아키텍처 단순화: 중요한 노드나 엣지만 유지하여 학습.
정규화 기법 및 Dropout 활용.



<LSTM으로 학습할 때의 어려움>
(1) 시간적 데이터 전처리
UFC 데이터셋을 시계열 데이터로 변환해야 합니다.
선수별로 과거 경기 데이터를 정렬.
각 경기 데이터를 정해진 시계열 윈도우(예: 최근 N경기)로 변환.
특정 선수는 경기를 많이 했지만, 일부 선수는 적게 했을 수 있습니다(불균형 문제).
해결책:
모든 선수가 동일한 길이의 시계열 데이터를 가지도록 패딩(Padding) 또는 샘플링.
패딩된 시계열 데이터에서 학습 성능이 떨어질 수 있으므로, 선수별로 적합한 데이터 전처리 전략 적용.

(2) 단기 vs 장기 의존성
LSTM은 장기 의존성을 학습할 수 있지만, 과거 경기 데이터가 너무 많으면 학습이 불안정해질 수 있습니다.
예: 10년 전 경기보다 최근 3경기가 더 중요한데, 모델이 이를 구분하지 못할 가능성.
반대로, 데이터가 너무 짧으면 중요한 정보를 잃을 수 있습니다.
해결책:
시계열 데이터를 다룰 때, 적절한 윈도우 크기(최근 N경기)를 설정.
예: 최근 5~10경기만 포함하여 학습.

(3) 데이터 불균형
승리(1)와 패배(0) 데이터가 불균형일 가능성이 큼.
LSTM은 클래스 불균형에 민감하며, 자주 등장하는 클래스를 편향되게 학습할 수 있음.
해결책:
오버샘플링/언더샘플링 또는 Focal Loss와 같은 특화된 손실 함수 사용.

(4) 학습 시간
LSTM은 시계열 데이터 처리로 인해 일반 모델(DNN, SVM 등)보다 학습 시간이 더 오래 걸립니다.
특히, 시계열 데이터 길이가 길어지면 학습 속도가 급격히 감소.
해결책:
GPU/TPU 가속을 적극 활용.
학습 데이터의 길이를 조정하여 시간 복잡도를 줄임.



<개인적 결론>

(1) 전처리 - 노드를 모든 선수마다 가지는 것이 아닌 선수 특성별로 단순화
(예를 들어, 중간 리치 킥복싱 스타일 낮은 카디오의 노드)

(2) 희소성 - sparse한 연결은 노드 단순화로 완화될 것으로 기대.
1라운드 KO/TKO/SUB(이하 KTS로 요약) > 2라운드 KTS > 3라운드 KTS > 4라운드 KTS > 5라운드 KTS > 판정 순으로 weight를 부여.

(3) 동적 그래프 - Dynamic GNN과 Temporal GNN에 대한 조사 필요.
데이터 확인도 필요. 변화를 반영할 가치가 있나? = 한 선수의 평균 경기 횟수는 얼마나 되나?
필요한 부분인지 의문. 이를 반영한다 해도, 스타일 변화를 크게 주지 않는 선수가 대부분이며 신예 선수에 대해선 사용할 수 없음.
여유가 있다면 사용해서 일반 GNN과 성능을 비교해 보는 것도 좋을 것.

(4) 안정성 - 노드 단순화로 갖출 수 있을 거라 기대.

* LSTM 적용은 불필요해 보여
